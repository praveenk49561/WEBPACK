// WEBPACK LEARNING PHASE

STEP 1: Intitialize NPM
        # (cmd -) npm init
        # Enter Details For Initialization
        # Add "private": "true" In package.json To Not To Publish In NPM

STEP 2: Install Wepack Dev Dependencies
        # (cmd -) npm install --save-dev webpack webpack-cli webpack-dev-server
        # webpack ~ JS Bundler Dependency
        # webpack-cli ~ JS Bundler Command Line Interface
        # webpack-dev-server ~ JS Bundler Dev Server

STEP 3: Creation Of "index.js" In (src) Directory
        # Create "index.js" In (src) Directory (~REASON: as Webpack by default look for index.js in src directory for entry point)

STEP 4: Creation Of index.html In (public) Directory
        # Create index.html In (public) Directory (~REASON: as Webpack will emit bundled script file, which as to be added in html's src tag)

STEP O: SAMPLE CHECK
        # Write Some Function in "./src/index.js" File
        # Add Key Pair "test: webpack" as NPM CLI CMD in "./package.json" file
        # (cmd -) npm test (~REASON: now webpack will emit bundled js file in dist folder)
        # Add Script Tag With Src as "./dist/main.js" (~REASON: manually adding bundled script file to html)

STEP 5: Create webpack.config.js File
        # Create "webpack.config.js" In Main Directory

~~~~~~~~CORE CONCEPTS OF WEBPACK~~~~~~~~~~
@URL      : https://webpack.js.org/concepts/

~~ENTRY  :
         # Its The Entry Ponit Where The Webpack Takes The JS (Script) File To Proceed Its Bundling Procees

~~OUTPUT :
         # Its The Ouptut Point Where The Webpack Emitts The Bundled JS (Script) File After Its Bundling Process

~~LOADERS:
         # Out Of The Box, Webpack Only Understands JavaScript And Json Files
         # And To Make Webpack Understand More Files (Eg: jpeg, pdf, css, scss and etc), Loaders (Eg: css-Loader, file-loader and etc), 
         Have To Be Used
~~PLUGINS: 
         # It Can Be Used To Lift The Webpack's Bundling Process To Next Level
         # Eg: ~ htmlWebpackPlugin to create a root html with script tag's src as bundled (script) file in compile time.
               ~ esLintWebpackPlugin Helps the JavaScript's programming codes to meet ES Standard.
~~MODE   :
         # Mode Parameter Is To Used Set Default Optimization, That Webpack Has.
         # Mode Key Takes Values As Stings: 
         ~~'development' : to get development optimizations, 
         ~~'production'  : to get production optimizations,
         ~~'none'        : to opt no default optimizations.
         # By setting the mode parameter to either development, production or none, you can enable webpack's built-in optimizations that
         correspond to each environment. The default value is production.

~~Browser Compatibility :
         # Webpack supports all browsers that are ES5-compliant (IE8 and below are not supported). 
         # Webpack needs Promise for import() and require.ensure(). 
         # If you want to support older browsers, you will need to load a polyfill before using these expressions
         
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# BASIC WEBPACK COMMANDS --------------------------------------------------------------------------------------

                ->>>  build|bundle|b [entries...] [options]     ::  Run webpack (default command, can be omitted).
                ->>>  configtest|t [config-path]                ::  Validate a webpack configuration.
                ->>>  help|h [command] [option]                 ::  Display help for commands and options.
                ->>>  info|i [options]                          ::  Outputs information about your system.
                ->>>  serve|server|s [entries...] [options]     ::  Run the webpack dev server.
                ->>>  version|v [commands...]                   ::  Output the version number of 'webpack', 'webpack-cli' and 'webpack-dev-server'    
                                                                and commands.
                ->>>  watch|w [entries...] [options]            ::  Run webpack and watch for files changes.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

STEP 6: Package.json Scripts
        # "build" : "[webpack | webpack build]"
                     ~ webpack, webpack build are basic cmds to use webpack to bundle the script file default mode as
                     production with its optimizations.
                
                # BASIC WEBPACK BUILD COMMANDS ASSOCIATED FLAGS (SELECTED BY ME) ----------------------------------------------------
                --entry	                string[]	    The entry point(s) of your application e.g. ./src/main.js
                --config, -c	        string[]	    Provide path to a webpack configuration file e.g. ./webpack.config.js
                --config-name	        string[]	    Name of the configuration to use
                --name	                string	            Name of the configuration. Used when loading multiple configurations
                --color	                boolean	            Enable colors on console
                --env	                string[]	    Environment passed to the configuration when it is a function
                --node-env	        string	            Set process.env.NODE_ENV to the specified value
                --progress	        boolean, string	    Print compilation progress during build
                --help	                boolean	            Outputs list of supported flags and commands
                --output-path, -o       string	            Output location of the file generated by webpack e.g. ./dist
                --target, -t	        string[]	    Sets the build target
                --watch, -w	        boolean	            Watch for file changes
                --hot, -h	        boolean	            Enables Hot Module Replacement
                --json, -j	        boolean, string	    Prints result as JSON or store it in a file
                --mode	                string	            Defines the mode to pass to webpack
                --version, -v	        boolean	            Get current version
                --stats	                boolean, string	    It instructs webpack on how to treat the stats
                --analyze	        boolean	            It invokes webpack-bundle-analyzer plugin to get bundle information

                -----------------------------------------------------------------------------------------------------------------

        # "start" : "[webpack serve | webpack-dev-server]"
                     ~ webpack server, webpack-dev-server are basic cmds to run the project in local server.

                # BASIC WEBPACK SERVE COMMANDS ASSOCIATED FLAGS (SELECTED BY ME) ----------------------------------------------------
                -c, --config <value...>                   Provide path to a webpack configuration file e.g. ./webpack.config.js.
                --config-name <value...>                  Name of the configuration to use.
                --env <value...>                          Environment passed to the configuration when it is a function.
                --node-env <value>                        Sets process.env.NODE_ENV to the specified value.
                --progress [value]                        Print compilation progress during build.
                -j, --json [value]                        Prints result as JSON or store it in a file.
                --entry <value...>                        The entry point(s) of your application e.g. ./src/main.js.
                -o, --output-path <value>                 Output location of the file generated by webpack e.g. ./dist/.
                -t, --target <value>                      Sets the build target e.g. node.
                --mode <value>                            Defines the mode to pass to webpack.
                --name <value>                            Name of the configuration. Used when loading multiple configurations.

                --client-logging <value>                  Allows to specify options for client script in the browser or disable client script.
                --client-progress                         Prints compilation progress in percentage in the browser.
                --no-client-progress                      Does not print compilation progress in percentage in the browser.
                --client-overlay                          Enables a full-screen overlay in the browser when there are compiler errors or warnings.
                --no-client-overlay                       Disables a full-screen overlay in the browser when there are compiler errors or warnings.
                --client-overlay-errors                   Enables a full-screen overlay in the browser when there are compiler errors.
                --no-client-overlay-errors                Negative 'client-overlay-errors' option.
                --client-overlay-warnings                 Enables a full-screen overlay in the browser when there are compiler warnings.
                --no-client-overlay-warnings              Negative 'client-overlay-warnings' option.

                --compress                                Enables gzip compression for everything served.
                --no-compress                             Disables gzip compression for everything served.
                --history-api-fallback                    Allows to proxy requests through a specified index page (by default 'index.html'), useful for Single Page Applications that utilise the HTML5 History API.
                --no-history-api-fallback                 Negative 'history-api-fallback' option.
                --host <value>                            Allows to specify a hostname to use.
                --hot [value]                             Enables Hot Module Replacement.
                --no-hot                                  Disables Hot Module Replacement.

                --live-reload                             Enables reload/refresh the page(s) when file changes are detected (enabled by default).
                --no-live-reload                          Disables reload/refresh the page(s) when file changes are detected (enabled by default)
                --open [value...]                         Allows to configure dev server to open the browser(s) and page(s) after server had been started (set it to true to open your default browser).
                --no-open                                 Does not open the default browser.
                --open-target <value...>                  Opens specified page in browser.
                --open-app-name <value...>                Open specified browser.
                --open-app <value...>                     Open specified browser.
                --open-reset                              Clear all items provided in 'open' configuration. Allows to configure dev server to open the browser(s) and page(s) after server had been started (set it to true to open your default browser).
                --open-target-reset                       Clear all items provided in 'open.target' configuration. Opens specified page in browser.
                --open-app-name-reset                     Clear all items provided in 'open.app.name' configuration. Open specified browser.
                --port <value>                            Allows to specify a port to use.
                --static [value...]                       Allows to configure options for serving static files from directory (by default 'public' directory).
                --no-static                               Negative 'static' option.
                --static-directory <value...>             Directory for static contents.
                --static-public-path <value...>           The static files will be available in the browser under this public path.
                --static-serve-index                      Tells dev server to use serveIndex middleware when enabled.
                --no-static-serve-index                   Does not tell dev server to use serveIndex middleware.
                --static-watch                            Watches for files in static content directory.
                --no-static-watch                         Does not watch for files in static content directory.
                --static-reset                            Clear all items provided in 'static' configuration. Allows to configure options for serving static files from directory (by default 'public' directory).
                --static-public-path-reset                Clear all items provided in 'static.publicPath' configuration. The static files will be available in the browser under this public path.
                --watch-files <value...>                  Allows to configure list of globs/directories/files to watch for file changes.
                --watch-files-reset                       Clear all items provided in 'watchFiles' configuration. Allows to configure list of globs/directories/files to watch for file changes.


STEP 7:  Webpack Configuration
         # By Default Webpack 5 Dont Need Any Configuration File (~REASON: It Takes Entry Point As "./src/index.js" And Emits The Outfile To "./dist/main.js")

         # Types Of Exporting The configurations
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         1, Exporting Via Function
            # Exporting Via Function Intakes Two Parameters (env, argv) And Should Return An Object With Config Options (Eg: Entry, Output ..etc).
            # The Parameters :
              -> env (first param)  : It describes an object with environment variables that are passed via CLI
              -> argv(second param) : It describes an object with webpack options that are passed via CLI

              Eg: module.exports = function(env, args) {
                      const entry = './src/index';
                      if (env === 'production') {
                            entry = argv.entry;
                      }
                      return {
                              entry: entry,
                              output: "./dist",
                      }
              }
        
        2, Exporting Via Promise
           # Is Same Exporting Via Function, Here The Function Return A New Promise, Which Returns An Config Options Asynchronously
           # The Parameters :
              -> env (first param)  : It describes an object with environment variables that are passed via CLI
              -> argv(second param) : It describes an object with webpack options that are passed via CLI
              
              Eg: module.exports = function(env, args) {
                      return new Promise (resolve, reject) {
                              setTimeout (function(){
                                const entry = './src/index';

                                if (env === 'production') {
                                        entry = argv.entry;
                                }

                                if (true) {
                                        resolve {
                                                entry: entry,
                                                output: "./dist",
                                        }
                                } else {
                                        reject('Rejected, Exporting Via Proise`);
                                }
                              }, 5000); // Asynchronous
                      }
              }


              3, Exporting Multiple Configuration
              # To Export Multiple Configs, It Should Passed As Array Config Objects With Key "name".
              # By Default Webpack will Build For All Config Objects In Array
              # If you pass a name to --config-name flag, webpack will only build that specific configuration.

                
                Eg: module.exports = [
                                        {
                                                entry: path.resolve(__dirname, 'src/index.js'),
                                                output: {
                                                publicPath: '/',
                                                path: path.resolve(__dirname, 'dist'),
                                                filename: 'main.js',
                                                },
                                                name: 'PraveenK',
                                        },
                                        {
                                                entry: path.resolve(__dirname, 'src/index.js'),
                                                output: {
                                                publicPath: '/',
                                                path: path.resolve(__dirname, 'dist2'),
                                                filename: 'main.js',
                                                },
                                                name: 'KishoreK',
                                        }
                                ]
               

              3, Exporting Multiple Configuration With Parallelism Option
              #  It Is Same As Exporting Multiple Configs, But With Parallelism Option Webpack Will Build/Compile Multiple Config In 
                 Parallel Threads To Speed Up The Complie Process 
              #  Add module.exports.parallelism = 1 // Complie One Parallely
                 
                Eg: module.exports = [
                                        {
                                                entry: path.resolve(__dirname, 'src/index.js'),
                                                output: {
                                                publicPath: '/',
                                                path: path.resolve(__dirname, 'dist'),
                                                filename: 'main.js',
                                                },
                                                name: 'PraveenK',
                                        },
                                        {
                                                entry: path.resolve(__dirname, 'src/index.js'),
                                                output: {
                                                publicPath: '/',
                                                path: path.resolve(__dirname, 'dist2'),
                                                filename: 'main.js',
                                                },
                                                name: 'KishoreK',
                                        }
                                ];
                    module.exports.parallelism = 2;

STEP 8:  Webpack Configuration Options
         
         # Context: 
           
           # The context is an absolute string to the directory that contains the entry files.
           # Context is the main path where webpack search for entry points path that is given in entry option.

           Eg: context: path.resolve(__dirname, '/src')
                        // D:/Learning Phase/Webpack/src
                        // Then It Search For Entry Points From /src/ ...entry points
        
         # Entry:
           
           # The Entry Is The Where The Webpack Search For Paths Of Entry To Start Its Bundling Process

           # Types To Define The Entry Points:
             
             ~ Single Entry: # entry: string | [string]
                             # It Takes A Sting Path | A Array Of String Path
                             # If It Takes A Array Of String Path Then It Will Bundle Those Files Into One Single Bundle
                             # Its The ShortHand Of Below Object Way To Define An Entry Paths
                             # Single Entry Syntax is a great choice when you are looking to quickly setup a webpack configuration for an 
                             application or tool with one entry point (i.e. a library).
                             # However, there is not much flexibility in extending or scaling your configuration with this syntax

               Eg: entry: './index.js',
                   entry: ['./index.js', './alert.js', './app.js'],

             ~ Object Entry: # entry: { <entryChunkName> string | [string] } | {}
                             # Its Another Way To Define An Entry Paths As Key Value Pair
                             # Here "key" : "./path/file" -> key refers bundle Name, value refers path of the file or 
                             array of paths of the files.
                             # The object syntax is more verbose. However, this is the most scalable way of defining 
                             entry/entries in your application.
                             !# The object syntax is more verbose. However, this is the most scalable way of defining entry/entries in your application.

               Eg: entry: {
                       main: './index.js',
                       mock: './mock.js',
                       help: ['./help.js', './helpTwo.js'],
               }

             ~ Description Object Entry: 
                              # Its Another Way To Define An Entry Paths As Key Value Pair
                              # Here "Key" : {
                                      filename: "main",
                                      import: './path/file',
                                      library: {
                                              name: 'MyLibrary',
                                              type: 'window',
                                      },
                                      dependon: 'dependentKey',
                                      runtime: 'runtime',
                                      publicpath: '/',
                              }

                              In Above Example "Key"  is the name of the Entry point file, And Value will Be An Object Of Options
                              Listed Below:

                              **dependOn: The entry points that the current entry point depends on. They must be loaded before this entry point is loaded.

                              **filename: Specifies the name of each output file on disk.

                              **import: Module(s) that are loaded upon startup.

                              **library: Specify library options to bundle a library from current entry.

                              **runtime: The name of the runtime chunk. When set, a new runtime chunk will be created. It can be set to false to avoid a new runtime chunk since webpack 5.43.0.

                              **publicPath: Specify a public URL address for the output files of this entry when they are referenced in a browser. Also see output.publicPath.

         # Ouptut:

           # The Ouptut Config Option Tells The Webpack To Where To Emite Those Bundled Files
           # The Output is an object with options as listed below

           Output Options: 
                       **assetModuleFileName: Syntax Follows Same As Below Mentioned Filename
                                                -> This option determines the name of each asset bundle like CSS, JSON, IMAGES, etc.
                       
                       **chunckFileNamae    : Syntax Follows Same As Below Mentioned Filename
                                                -> This option determines the name of each non entry intialized chunks like LazyLoading, CodeSplitting...etc.
                                                -> It is used to set name for chunks created by on demand loading.
                                    
                        
                       **filename           : String, function(pathData, assetInfo)
                                                -> This option determines the name of each output bundle
                                                -> Even though there are multiple entry points, output option will be the one
                                                -> There Are Two Ways of determining filename
                                                * String
                                                * Function with return type String
                                                
                                                Eg (String):
                                                filename: "main.js"
                                                Eg (Function):
                                                filename: (pathData, assetInfo) => "main.js"

                                                -> If there is only one entry point, then we can give static string like below.
                                                
                                                Eg: filename: 'main.js'

                                                -> Else If there is two or more entry points, then we cannot give static string
                                                -> At this we have to use Template Strings like below

                                                Eg: filename: '[name].js

                                                In above example [name] replaces the entry point name, so in output it will be like
                                                main.js, or main2.js like that.

                                                **** TEMPLATE STRINGS ****

                                                        ~ Substitutions available on Compilation-level:
                                                                Template	Description

                                                                [fullhash]	The full hash of compilation
                                                                [hash]	        Same, but deprecated

                                                        ~ Substitutions   available on Chunk-level:
                                                                Template	Description

                                                                [id]	        The ID of the chunk
                                                                [name]	        The name of the chunk, if set, otherwise the ID of the chunk
                                                                [chunkhash]	The hash of the chunk, including all elements of the chunk
                                                                [contenthash]	The hash of the chunk, including only elements of this content type (affected by optimization.realContentHash)

                                                        ~ Substitutions available on Module-level:
                                                                Template	Description
                                                                
                                                                [id]	        The ID of the module
                                                                [moduleid]	Same, but deprecated
                                                                [hash]	        The hash of the module
                                                                [modulehash]	Same, but deprecated
                                                                [contenthash]	The hash of the content of the module

                                                        ~ Substitutions available on File-level:
                                                                Template	Description

                                                                [file]	        Filename and path, without query or fragment
                                                                [query]	        Query with leading ?
                                                                [fragment]	Fragment with leading #
                                                                [base]	        Only filename (including extensions), without path
                                                                [filebase]	Same, but deprecated
                                                                [path]	        Only path, without filename
                                                                [name]	        Only filename without extension or path
                                                                [ext]	        Extension with leading .
                                                        
                                                        ~ Substitutions available on URL-level:
                                                                Template	Description
                                                                
                                                                [url]	        URL
                        
                        **clean                 :boolean { dry?: boolean, keep?: RegExp | string | ((filename: string) => boolean) }
                                                  -> It is used to clean the output folder before it emits

                                                  Eg: clean: true,
                                                      If true is given it will clean the folder, before it emits

                                                      clean: {
                                                         dry: true
                                                      }
                                                      Log the assets that should be removed instead of deleting them.

                                                      clean: {
                                                         keep: 'path string',
                                                      }
                                                      I Dont Understand Why Keep Is Used For
                        
                        **compareBeforeEmit     :boolean
                                                -> Tells webpack to check if to be emitted file already exists and has the same content before writing to the output file system.
                                                -> WARNING: webpack will not write output file when file already exists on disk with the same content.
                        
                        **path                  :string = path.resolve(__dirname, 'dist')
                                                -> The output directory as an absolute path.
                                                -> Here We have to give path, where the webpack emits the bundled file
                        
                        **publicPath            : function or string
                                                -> This is an important option when using on-demand-loading or loading external resources like images, files, etc. If an incorrect value is specified you'll receive 404 errors while loading these resources.
                                                -> This option specifies the public URL of the output directory when referenced in a browser. 
                                                -> A relative URL is resolved relative to the HTML page (or <base> tag). 
                                                -> Server-relative URLs, 
                                                -> protocol-relative URLs or absolute URLs are also possible and sometimes required, i. e. when hosting assets on a CDN.
                                                   Here CDN (Content Delivery Network)
                                                   https://server.com/ - If the bundle and assets are available at root folder of the server
                                                   https://server.com/public - If the bundle and assets are available at public folder of the root folder of the server
                        
         # Module: 

           # These Options Determines How The Different Types Of Modules Within The Project Will Be Treated.
           ~ WHATS IS MODULES @URL: https://webpack.js.org/concepts/modules/

           Module Options:

                        **noParse               : RegExp [RegExp] function (content) => true || false String [String]
                                                -> Prevent webpack from parsing any files matching the given regular expression(s). Ignored files should not have calls to import, require, define or any other importing mechanism.
                                                -> This can boost build performance when ignoring large libraries.

                        **rules                 : An array of Rules which are matched to requests when modules are created. These rules can modify how the module is created.
                                                They can apply loaders to the module, or modify the parser.

                                                -> module.rules will contains array of rule objects which shown below

                                **rule          : Object
                                                -> A Rule can seperated into three (3) parts named as Conditions, Results and Nested Rules

                                                **Conditions :
                                                        
                                                        -> There Are Two Types Of Input Values For Conditions
                                                           
                                                           1, Resource - -> The Absolute Path To The File Requested
                                                                         -> Eg: My Understandings - Here it is the absolute path to the file (the files that are imported) which requested when webpack start its bundling process,
                                                                                                  - A Path where webpack starts to search for files (the files that are imported) to start its bundling process
                                                                         -> It's already resolved according to the resolve rules.
                                                                         -> Just To Note Resolve Can Be Understand In Next Option
                                                                         -> Resource Examples Are: Css, jpeg, png, JSON etc

                                                           2, Issuer   - -> The Absolute Path To the File That Requested The Resource, 
                                                                         -> Eg: My Understandings - Here it is the absolute path to the file (the file in which import is used to access the resources).

                                                        Example: When we import './style.css' within app.js, the resource is /path/to/style.css and the issuer is /path/to/app.js.

                                                        **In a single rule object there are properties/options/Conditions, which can be used.

                                                        **Such properties/options/Conditions are catagorized into two parts.

                                                        Part One properties/options/Conditions (Which is for Resource):

                                                        ->test
                                                        ->include
                                                        ->exclude
                                                        ->resource

                                                        Part Two properties/options/Conditions (which is for Issuer):

                                                        ->issuer

                                                        **When using multiple properties/options/Conditions, all conditions must match.

                                                **Results :

                                                     -> Rule results are used only when the Rule condition matches.
                                                     -> (My Understandings): If a rule has condition(A match case used to find the modules/files) then it should have a result(A work which needs to be done on files that are matched with give conditons). 

                                                     There are two output values of a Rule:

                                                        **Applied loaders: An array of loaders applied to the resource.
                                                        **Parser options: An options object which should be used to create the parser for this module.

                                                        ~ Applied Loaders :
                                                                Below are options which can used to apply loaders as results for a rule.
                                                                **loader, options, use - Standard options to apply loaders
                                                                **query, loaders. - (For compatibility also these properties)
                                                                **enforce - The enforce property affects the loader category. Whether it's a normal, pre- or post- loader.
                                                        
                                                        ~Paser Options :
                                                                Below are the options which can be used to apply parsers as results for a rule
                                                                **parser - The paser property affects paser options.

                                                **Nested Rule   : Nested rules can be specified under the properties rules and oneOf.

                                                        ->These rules are evaluated only when the parent Rule condition matches. Each nested rule can contain its own conditions.
                                                        -> (My Understandings) - Nested rule must have one main rule (parent rule), and this parent rule should contain one condition and 
                                                        "oneOf" option/property/key which takes array of rule.
                                                        -> An array of Rules from which only the first matching Rule is used when the Rule matches.
                                                        ->The order of evaluation is as follows:

                                                        1, The parent rule
                                                        2, rules
                                                        3, oneOf    

                                                        EXAMPLE: 
                                                        { // PARENT RULE
                                                                test: /\\.css$/,
                                                                oneOf: [  // RULES // ONEOFF
                                                                        {
                                                                                test: /\\.css$/,
                                                                                use: 'url-loader',
                                                                        },
                                                                        {
                                                                                test: /\\.css$/,
                                                                                use: 'file-loader',
                                                                        },
                                                                ],
                                                        },                          
                                                
                                                  
                                Options For The Above Mentioned Catagories (Conditions, Results, Nested Rule & More) Are Listed And Explained To My Understanding :

                                -> test (rule.test) : 
                                        ~ This options comes under conditions category of rule object.
                                        ~ Include all modules that pass test assertion.
                                        ~ Note: If you supply a Rule.test option, you cannot also supply a Rule.resource. 
                                        See Rule.resource and Condition.test for details.

                                        (My Understanding): 
                                        ~ Basically the test option of a rule object takes conditions, And will check those conditions against
                                        the modules (Ex: like files thats needs to be bundled). 
                                        ~ If the conditons matched, it will apply results category options such as loaders, parsers & more.
                                        ~ Based on the results, the matched modules are bundled or parsed or loaded respectively.

                                        **conditons - test accepts conditons such as given below :
                                        -> A string              : To match the input must start with the provided string. I. e. an absolute directory path, or absolute path to the file.
                                                                   (My Understanding) - Here we have to give a string.
                                                                                        String means an absolute path(complete path) to the files that needs to be matched.

                                                                   Eg: test: 'c:\users\praveen\downloads\img.jpg'

                                        -> A RegExp              : It's tested with the input.
                                                                   (My Understanding) - Here we have to give regExp.

                                                                   Eg: test: '/\.jpg$/

                                        -> A function            : It's called with the input and must return a truthy value to match.
                                                                  (My Understandings) - here we have to give a function which takes params and should return truthy value
                                                                  
                                                                  Eg: test: (pathsOfFile) => {
                                                                          return pathOfFile === 'c:\users\praveen\downloads\img.jpg'
                                                                  }

                                        -> An array of Conditions: At least one of the Conditions must match.
                                                                   (My Understandings) - here we have to giva an array of conditons, this array can
                                                                   consist of string or regExp or a function.
                                                                   -> But atleast one condtion should match.

                                                                   Eg: test: [
                                                                           /\.(jpg|gif)$/,
                                                                           (pathOfFile) => /\.(jpg|gif)$/.test(pathOfFile),
                                                                           ''c:\users\praveen\downloads\img.jpg',
                                                                   ]

                                        -> An object             : All properties must match. Each property has a defined behavior.
                                                                   (My Understandings) - here we have give conditions in an object format with keys such as
                                                                   and, or, not.

                                                                   { and: [array of Condition] }: All Conditions must match.

                                                                   { or: [array of Condition] }: Any Condition must match.
   
                                                                   { not: [array of Condition] }: All Conditions must NOT match.

                                -> resource (rule.resource) :
                                                ~ This option is same as test option shown above.
                                                ~ If rule.resource is used, you cant use rule.test. Vice versa.
                                                ~ Rule.resource option is used to match the resources.

                                                (My Understandings) - This is option is same as rule.test.
                                                                    - Here we have to give conditions, so, it will consider the modules which matches
                                                                      the given condition.
                                                                    - We have to give conditons which should match the resource type.
                                                                    - It will look for modules which is being imported from issuer.
                                                                    
                                                                    Eg: {
                                                                            resource: /.(jpg|gif)$/,
                                                                            type: 'asset/resource',
                                                                        }
                                                                    - In above shown example, it will look for resources that are being imported,
                                                                    and if the above given conditon matches then it will asset/resource to compile/load
                                                                    the matched module.

                                -> resourceQuery (rule.resourceQuery) :
                                                                        - A Condition matched with the resource query. 
                                                                        - This option is used to test against the query section of a request string (i.e. from the question mark onwards).
                                                                        - If you were to import Foo from './foo.css?inline', the following condition would match:
                                                                        Eg: {
                                                                                test: /\\.css$/,
                                                                                resourceQuery: /inline/,
                                                                                use: 'url-loader',
                                                                        },

                                                                        (My Understandings) - This option is used to check one more conditon against the module.
                                                                                            - Here we have to give a condtion which will match against the query section of resource.

                                                                                            For Example: 
                                                                                                {
                                                                                                        test: /\\.jpg$/,
                                                                                                        resourceQuery: /resourceQueryTypeMakeItAsBase64/,
                                                                                                        type: 'asset/inline,
                                                                                                }
                                                                                             - In this option we should give resourceQuery while importing resource itself.
                                                                                             - import sads from './foo.jpg?resourceQueryTypeMakeItAsBase64'.
                                                                                             - Then it will check the above given rule, check it is of .jpg type and having resourceQueryTypeMakeItAsBase64 as resourceQuery.
                                                                                             - If above both conditons matches then it will apply asset/inline as loader for this module.
           
                                -> Issuer (rule.issuer) : 
                                                        ~ This option is same as resource, but it will check for issuer.
                                                        ~ Issuer means the module that requests the resource.

                                -> 
           